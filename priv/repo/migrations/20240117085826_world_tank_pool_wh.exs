defmodule Fluid.Repo.Migrations.WorldTankPoolWh do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:worlds, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :name, :text, null: false
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
    end

    create table(:warehouses, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :world_id,
          references(:worlds,
            column: :id,
            name: "warehouses_world_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:tanks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :name, :text
      add :capacity_type, :text
      add :regularity_type, :text, default: "regular"
      add :location_type, :text
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :warehouse_id,
          references(:warehouses,
            column: :id,
            name: "tanks_warehouse_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :world_id,
          references(:worlds,
            column: :id,
            name: "tanks_world_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:pools, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :name, :text
      add :capacity_type, :text
      add :location_type, :text
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :warehouse_id,
          references(:warehouses,
            column: :id,
            name: "pools_warehouse_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :world_id,
          references(:worlds,
            column: :id,
            name: "pools_world_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:pools, "pools_warehouse_id_fkey")

    drop constraint(:pools, "pools_world_id_fkey")

    drop table(:pools)

    drop constraint(:tanks, "tanks_warehouse_id_fkey")

    drop constraint(:tanks, "tanks_world_id_fkey")

    drop table(:tanks)

    drop constraint(:warehouses, "warehouses_world_id_fkey")

    drop table(:warehouses)

    drop table(:worlds)
  end
end
